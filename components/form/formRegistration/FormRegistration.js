import {
	Form,
	Input,
	Checkbox,
	message,
	Button,
	AutoComplete,
	notification,
} from 'antd'
import { useState, useContext } from 'react'
import { registration } from '../../../http/userAPI'
import { MyContext } from '@/contexts/MyContextProvider'

const FormRegistration = ({ handleCancel }) => {
	const [form] = Form.useForm()
	const [isCheck, setIsCheck] = useState(false)
	const { user } = useContext(MyContext)
	const [tel] = useState('')
	const [autoCompleteResult, setAutoCompleteResult] = useState([])

	const [api, contextHolder] = notification.useNotification()
	const openNotificationWithIcon = (type, title, description) => {
		api[type]({
			message: title,
			description: description,
			duration: 10,
		})
	}
	const onWebsiteChange = value => {
		if (!value) {
			setAutoCompleteResult([])
		} else {
			setAutoCompleteResult(['@gmail.com', '@tut.by', '@yandex.by', '@mail.ru'].map((domain) => `${value}${domain}`));
		}
	}
	const websiteOptions = autoCompleteResult.map((website) => ({
		label: website,
		value: website,
	}))
	let count = 0

	const onFinish = values => {
		console.warn("üöÄ üöÄ üöÄ  _ file: FormRegistration.js:43 _ onFinish _ values:", values)
		// if (count < 0) {
			registration(values.email, values.password)
				.then(data => {
					console.warn("üöÄ üöÄ üöÄ  _ file: FormRegistration.js:47 _ onFinish _ data:", data)
					message.success('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã!')
					handleCancel()
					// user.setUserData(data)
					// openNotificationWithIcon('success', '–ü–æ–¥–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', `–í–∞–º –Ω–∞ –ø–æ—á—Ç—É ${data.login} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏!`)
					setTimeout(() => { form.resetFields() }, [1000])
				})
				.catch(error => {
					console.warn("üöÄ üöÄ üöÄ  _ file: FormRegistration.js:55 _ onFinish _ error:", error)
					if (error) message.error(error)
				})
		// }
		count++
	}
	const onFinishFailed = errorInfo => message.error('–û—à–∏–±–∫–∞')
	const onChange = (e) => setIsCheck(e.target.checked)
	const beforeMaskedValueChange = (newState, oldState, userInput) => {
		var { value } = newState
		var selection = newState.selection
		var cursorPosition = selection ? selection.start : null
		if (value.endsWith('-') && userInput !== '-' && !tel.endsWith('-')) {
			if (cursorPosition === value.length) {
				cursorPosition--
				selection = { start: cursorPosition, end: cursorPosition }
			}
			value = value.slice(0, -1)
		}
		return {
			value,
			selection
		}
	}
	return (
		<>
			<Form
				layout='vertical'
				name="logIn"
				form={form}
				onFinish={onFinish}
				onFinishFailed={onFinishFailed}
				style={{ overflowX: 'hidden' }}
			>
				<Form.Item
					label="–õ–æ–≥–∏–Ω"
					name="email"
					tooltip="–í–∞—à–∞ –ø–æ—á—Ç–∞"
					hasFeedback
					rules={[
						{
							required: true,
							message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É!',
						},
						{
							type: 'email',
							message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email!',
						},
					]}
				>
					<AutoComplete
						options={websiteOptions}
						onChange={onWebsiteChange}
						placeholder="exemple@gmail.com"
					/>
				</Form.Item>
				<Form.Item
					label="–ü–∞—Ä–æ–ª—å"
					name="password"
					tooltip="–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞"
					hasFeedback
					rules={[
						{
							required: true,
							message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!',
						},
					]}
				>
					<Input.Password placeholder="–º–∏–Ω. 4 —Å–∏–º–≤–æ–ª–∞" />
				</Form.Item>
				<Form.Item
					name="password2"
					label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
					dependencies={['password']}
					rules={[
						{
							required: true,
							message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å!',
						},
						({ getFieldValue }) => ({
							validator(_, value) {
								if (!value || getFieldValue('password') === value) {
									return Promise.resolve();
								}
								return Promise.reject(new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!'));
							},
						}),
					]}
				>
					<Input.Password />
				</Form.Item>
				<Form.Item
					name="soglasen"
					valuePropName="checked"
					rules={[
						{
							validator: (_, value) =>
								value ? Promise.resolve() : Promise.reject(new Error('–ù–∞–∂–º–∏—Ç–µ –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã!')),
						},
					]}
				>
					<Checkbox
						onChange={onChange}
					>
						–í—Ö–æ–¥—è –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã.
					</Checkbox>
				</Form.Item>
				<Form.Item
				>
					<Button
						type="primary"
						htmlType="submit"
						onClick={onFinish}
						size='large'
					>
						–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
					</Button>
				</Form.Item>
			</Form>
			{contextHolder}
		</>
	)
}
export default FormRegistration

