"use client"
import { Button, Form, Input, message, Popconfirm, InputNumber, DatePicker, Radio, Upload, Image, Empty } from 'antd';
import { useState } from 'react';
import { changeOneArticle, deleteOneArticle } from '../../../../http/articleAPI';
import ReactEditor from '../../../react-quill/ReactEditor';
import moment from 'moment';
import { UploadOutlined } from '@ant-design/icons';

const FormChangeArticlesPage = ({ article }) => {
	console.log("üöÄ üöÄ üöÄ  _ file: FormChangeArticlesPage.js:10 _ FormChangeArticlesPage _ article:", article)
	const [value, setValue] = useState(article)
	const [form] = Form.useForm()

	const onFinish = (values) => {
		console.log('Success:', values)

		const formData = new FormData()
		formData.append('link', values.link)
		formData.append('article', values.article)
		formData.append('publication', values.publication)
		formData.append('view', values.view)
		formData.append('group', values.group)
		formData.append('description', values.description)
		formData.append('like', values.like)
		formData.append('id', article.id)
		formData.append('dateTime', values.dateTime ? new Date(values.dateTime.$d).toISOString() : article.dateTime);

		if (values.img) {
			for (let i = 0; i < values.img.fileList.length; i++) {
				const file = values.img.fileList[i].originFileObj;
				formData.append('img', file);
			}
		}

		changeOneArticle(formData)
			.then(data => {
				message.success(data.message)
			})
	}
	const onFinishFailed = (errorInfo) => {
		console.log('Failed:', errorInfo)
	}
	const deletePage = () => {
		deleteOneArticle(article.id)
			.then(data => {
				message.success(data.message)
				form.resetFields()
			})
	}
	return (
		<Form
			name="info-pages"
			labelCol={{
				span: 24,
			}}
			wrapperCol={{
				span: 24,
			}}
			form={form}
			initialValues={{
				link: article.link,
				publication: article.publication,
				view: article.view,
				article: article.article,
				group: article.group,
				description: article.description,
				like: article.like,
			}}
			onFinish={onFinish}
			onFinishFailed={onFinishFailed}
			autoComplete="off"
		>
			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –º–µ–Ω—é"
				name="link"
				rules={[
					{
						required: true,
						message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –º–µ–Ω—é!',
					},
				]}
			>
				<Input />
			</Form.Item>


			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
				name="description"
			>
				<Input />
			</Form.Item>

			<p className=''>
				–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
			</p>
			{
				JSON.parse(article.img).length ?
					<div className='w-1/5 mr-7'>

						<Image
							src={`uploads/${JSON.parse(article.img)[0]?.image}`}
							className='rounded-md shadow-2xl'
							preview={false}
						/>
					</div>
					:

					<Empty />
			}
			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
				name="img"
			>
				<Upload
					listType="picture"
					className="upload-list-inline"
					maxCount={1}
					beforeUpload={() => false}
				>
					<Button icon={<UploadOutlined />}>–ó–∞–≥—Ä—É–∑–∏—Ç—å</Button>
				</Upload>
			</Form.Item>


			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
				name="view"
			>
				<InputNumber />
			</Form.Item>


			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤"
				name="like"
			>
				<InputNumber />
			</Form.Item>

			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É —Å—Ç–∞—Ç—å–∏"
				name='group'
			>
				<Radio.Group>
					<Radio.Button value="1">–ë–µ—Å–ø–ª–æ–¥–∏–µ</Radio.Button>
					<Radio.Button value="2">–°–µ–º–µ–π–Ω—ã–µ</Radio.Button>
					<Radio.Button value="3">–ñ–µ–Ω—Å–∫–∏–π</Radio.Button>
					<Radio.Button value="4">–î–µ–ø—Ä–µ—Å—Å–∏—è</Radio.Button>
					<Radio.Button value="5">–ü–æ–¥—Ä–æ—Å—Ç–æ–∫–æ–≤—ã–π</Radio.Button>
					<Radio.Button value="6">–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–π</Radio.Button>
				</Radio.Group>
			</Form.Item>
			{
				article.dateTime ?
					<p className='mt-10 font-semibold'>–î–∞—Ç–∞: {moment(article.dateTime).format('lll')}</p>
					:
					undefined
			}
			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"
				name="dateTime"
			>
				<DatePicker
					showTime={{
						format: 'HH:mm',
					}}
					format="YYYY-MM-DD HH:mm"
				/>
			</Form.Item>
			<Form.Item
				label="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
				name="article"
			>
				<ReactEditor value={value} setValue={setValue} />
			</Form.Item>

			<Form.Item
				label=""
				name="publication"
			>
				<Radio.Group defaultValue={true}>
					<Radio.Button value={true}>–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</Radio.Button>
					<Radio.Button value={false}>–Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞—Ç—å</Radio.Button>

				</Radio.Group>
			</Form.Item>
			<Form.Item
				wrapperCol={{
					offset: 14,
				}}
			>
				<Button type="primary" htmlType="submit">
					–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
				</Button>
			</Form.Item>

			<Popconfirm
				title="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é?"
				onConfirm={deletePage}
				okText="–î–∞"
				cancelText="–ù–µ—Ç"
			>
				<Button type="primary" ghost danger>
					–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é
				</Button>
			</Popconfirm>
		</Form>
	)
}
export default FormChangeArticlesPage;