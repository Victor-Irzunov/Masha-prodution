import { PrismaClient } from '@prisma/client';
import { NextResponse } from 'next/server';

const prisma = new PrismaClient();

export async function GET(req, res) {
	// console.log('-----–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫ –ë–î –∑–∞ –Ω–æ–≤—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏' )
	try {
		const data = await prisma.otzyvy.findMany({
			where: {
				isNew: true,
			},
		});
		console.log("üöÄ üöÄ üöÄ  _ file: route.js:14 _ GET _ data:", data)
		return NextResponse.json(data);
	} catch (error) {
		return new NextResponse("–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –û—Ç–∑—ã–≤—ã Get", { status: 500 });
	}
}


export async function POST(req, res) {
	try {
		const body = await req.json();
		console.log("üöÄ üöÄ üöÄ otzyvy _ POST _ body:", body)
		const { name, vozvrast, city, tel, otzyv, rate } = body;
		const data = await prisma.otzyvy.create({
			data: {
				name,
				vozvrast,
				city,
				tel,
				otzyv,
				rate,
				response: '',
			},
		});

		if (data) {
			return NextResponse.json({ message: '–í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ' });
		}

		return NextResponse.json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞' });
	} catch (error) {
		console.log("üöÄ POST error –æ—Ç–∑—ã–≤:", error);
		return new NextResponse("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞", { status: 500 });
	}
}

export async function PUT(req, res) {
	try {
		const body = await req.json();
		const { id, response, isPublication } = body;
		const data = await prisma.otzyvy.update({
			where: { id },
			data: {
				response,
				isPublication,
				isNew: false,
			},
		});

		if (data) {
			return NextResponse.json({ message: '–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ' });
		}

		return NextResponse.json({ message: '–û—à–∏–±–∫–∞' });
	} catch (error) {
		console.log("üöÄ PUT error:", error);
		return new NextResponse("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", { status: 500 });
	}
}


